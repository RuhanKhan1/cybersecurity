import random

class NetworkIntrusionDetector:
    def __init__(self, window_size=10, threshold_factor=2):
        self.window_size = window_size
        self.threshold_factor = threshold_factor
        self.window = []

    def detect_anomaly(self, packet):
        self.window.append(packet)
        if len(self.window) > self.window_size:
            self.window.pop(0)

        avg_packet_value = sum(self.window) / len(self.window)
        std_dev = (sum((pkt - avg_packet_value) ** 2 for pkt in self.window) / len(self.window)) ** 0.5
        upper_threshold = avg_packet_value + self.threshold_factor * std_dev

        if packet > upper_threshold:
            print(f"Anomaly detected: Packet value {packet:.4f} exceeds upper threshold {upper_threshold:.4f}")
            self.threshold_factor *= 1.1  
        else:
            print(f"No anomalies detected: Packet value {packet:.4f}")

network_traffic = [random.random() for _ in range(100)]

nids = NetworkIntrusionDetector()

for packet in network_traffic:
    nids.detect_anomaly(packet)